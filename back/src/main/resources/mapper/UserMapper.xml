<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pears.asa.dao.UserDao">

    <select id="countUser" resultType="Integer">
        SELECT count(0)
        FROM sys_user u
        WHERE u.delete_status = '1'
    </select>

    <select id="countUserByCondition" resultType="Integer">
        SELECT count(0)
        FROM sys_user u
        WHERE u.delete_status = '1'
        <if test="email !='' and email !=null">
            AND u.email = #{email}
        </if>
        <if test="username !='' and username !=null">
            AND u.username = #{username}
        </if>
    </select>

    <resultMap id="userMap" type="com.pears.asa.util.model.One2Many">
        <id column="userId" property="userId"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="nicknameCn" property="nicknameCn"/>
        <result column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="lastLoginTime" property="lastLoginTime"/>
        <result column="deleteStatus" property="deleteStatus"/>
        <result column="activeStatus" property="activeStatus"/>
        <result column="email" property="email"/>

        <collection property="permissionList" ofType="String">
            <id column="permissionName" property="permissionName"/>
        </collection>
    </resultMap>
    <select id="listUser" resultMap="userMap">
        SELECT
            u.*,
            r.role_name                            roleName,
            CONCAT(p.menu_name, p.permission_name) permissionName
        FROM (
                 SELECT
                     id                                      userId,
                     username                                username,
                     nickname                                nickname,
                     nickname_cn                             nicknameCn,
                     role_id                                 roleId,
                     delete_status                           deleteStatus,
                     active_status                           activeStatus,
                     email                                   email,
                    password                                  password,
                     DATE_FORMAT(create_time, '%Y.%m.%d %T') createTime,
                     DATE_FORMAT(update_time, '%Y.%m.%d %T') updateTime
                 FROM sys_user
                 WHERE delete_status = '1'
                 ORDER BY id
                <if test="offSet !='' and offSet !=null and pageRow !='' and pageRow !=null">
                    LIMIT #{offSet}, #{pageRow}
                </if>
             ) u
            LEFT JOIN sys_role r ON r.id = u.roleId
            LEFT JOIN sys_role_permission rp ON rp.role_id = r.id
            LEFT JOIN sys_permission p ON p.id = rp.permission_id
            where 1=1
            <if test="curUserId !='' and curUserId !=null">
                and u.userId = #{curUserId}
            </if>
            <if test="curPassword !='' and curPassword !=null">
                and u.password = #{curPassword}
            </if>
        ORDER BY u.userId
    </select>

    <select id="getAllRoles" resultType="com.alibaba.fastjson.JSONObject">
        SELECT
            id        roleId,
            role_name roleName
        FROM sys_role
        WHERE delete_status='1'
    </select>

    <select id="getRolesWithRegister" resultType="com.alibaba.fastjson.JSONObject">
        SELECT
            id        roleId,
            role_name roleName,
            group_tag groupTag
        FROM sys_role
        WHERE delete_status='1'
        AND register_show='1'
    </select>

    <insert id="addUser" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO sys_user
        (username, password, nickname,nickname_cn, role_id
        <if test="email !='' and email !=null">
            , email
        </if>
        <if test="activeStatus !='' and activeStatus !=null">
            , active_status
        </if>
        ) VALUES
            (#{username}, #{password}, #{nickname}, #{nicknameCn}, #{roleId}

        <if test="email !='' and email !=null">
            , #{email}
        </if>
        <if test="activeStatus !='' and activeStatus !=null">
            , #{activeStatus}
        </if>
        )
    </insert>

    <insert id="registerUser" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO sys_user
        (username, password, nickname, role_id, email
        <if test="activeStatus !='' and activeStatus !=null">
            , active_status
        </if>
        <if test="nicknameCn !='' and nicknameCn !=null">
            , nickname_cn
        </if>
        <if test="phone !='' and phone !=null">
            , phone
        </if>
        <if test="class !='' and class !=null">
            , class
        </if>
        ) VALUES
            (#{username}, #{password}, #{nickname}, #{roleId}, #{email}
        <if test="activeStatus !='' and activeStatus !=null">
            , #{activeStatus}
        </if>
        <if test="nicknameCn !='' and nicknameCn !=null">
            , #{nicknameCn}
        </if>
        <if test="phone !='' and phone !=null">
            , #{phone}
        </if>
        <if test="class !='' and class !=null">
            , #{class}
        </if>
        )
    </insert>

    <update id="updateUser">
        UPDATE sys_user
        SET id=id
        <if test="nickname !='' and nickname !=null">
            ,nickname = #{nickname}
        </if>
        <if test="nicknameCn !='' and nicknameCn !=null">
            ,nickname_cn = #{nicknameCn}
        </if>
        <if test="password !='' and password !=null">
            , password = #{password}
        </if>
        <if test="email !='' and email !=null">
            , email = #{email}
        </if>
        <if test="activeStatus !='' and activeStatus !=null">
            , active_status = #{activeStatus}
        </if>
        <if test="roleId !='' and roleId !=null">
            , role_id = #{roleId}
        </if>
        <if test="deleteStatus !='' and deleteStatus !=null">
            , delete_status = #{deleteStatus}
        </if>
        WHERE id = #{userId}
    </update>

    <update id="updateUserByEmail">
        UPDATE sys_user
        SET
        <if test="activeStatus !='' and activeStatus !=null">
            active_status = #{activeStatus}
        </if>
        WHERE email = #{email}
    </update>

    <resultMap id="roleMap" type="com.pears.asa.util.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <result column="groupTag" property="groupTag"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
            <result column="nickname" property="nickname"/>
        </collection>
        <collection property="menus" ofType="com.pears.asa.util.model.One2Many">
            <id column="menuCode" property="menuCode"/>
            <result column="menuName" property="menuName"/>
            <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
                <id column="permissionId" property="permissionId"/>
                <result column="permissionName" property="permissionName"/>
            </collection>
        </collection>
    </resultMap>
    <select id="listRole" resultMap="roleMap">
        SELECT
            r.id              roleId,
            r.role_name       roleName,
            r.group_tag       groupTag,
            u.id              userId,
            u.nickname        nickname,
            p.id              permissionId,
            p.menu_code       menuCode,
            p.menu_name       menuName,
            p.permission_name permissionName
        FROM sys_role r
            LEFT JOIN sys_user u ON r.id = u.role_id AND u.delete_status = '1'
            LEFT JOIN sys_role_permission rp ON r.id = rp.role_id AND rp.delete_status = '1'
            LEFT JOIN sys_permission p ON rp.permission_id = p.id
        WHERE r.delete_status = '1'
        ORDER BY r.id, p.id
    </select>
    <resultMap id="permissionMap" type="com.pears.asa.util.model.One2Many">
        <id column="menuName" property="menuName"/>
        <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
            <id column="id" property="id"/>
            <result column="permissionName" property="permissionName"/>
            <result column="requiredPerm" property="requiredPerm" javaType="Integer"/>
        </collection>
    </resultMap>
    <select id="listAllPermission" resultMap="permissionMap">
        SELECT
            p.id                  id,
            p.menu_name           menuName,
            p.permission_name     permissionName,
            p.required_permission requiredPerm
        FROM sys_permission p;
    </select>

    <insert id="insertRole" useGeneratedKeys="true" keyProperty="roleId">
        INSERT INTO
        sys_role
        (
        role_name
        <if test="groupTag !='' and groupTag !=null">
            , group_tag
        </if>
        ) values
        (
        #{roleName}
        <if test="groupTag !='' and groupTag !=null">
            , #{groupTag}
        </if>
        )
    </insert>

    <insert id="insertRolePermission">
        insert into sys_role_permission (role_id, permission_id)
        values
        <foreach collection="permissions" item="item" index="index" separator=",">
            (#{roleId}, #{item})
        </foreach>
    </insert>

    <resultMap id="aRole" type="com.pears.asa.util.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
        </collection>
        <collection property="permissionIds" ofType="Integer">
            <id column="permissionId" property="permissionId"/>
        </collection>
    </resultMap>

    <select id="getRoleAllInfo" resultMap="aRole">
        SELECT
            r.id        roleId,
            r.role_name roleName,
            u.id        userId,
            p.id        permissionId
        FROM sys_role r
            LEFT JOIN sys_user u ON r.id = u.role_id AND u.delete_status = '1'
            LEFT JOIN sys_role_permission rp ON r.id = rp.role_id AND rp.delete_status = '1'
            LEFT JOIN sys_permission p ON rp.permission_id = p.id
        WHERE r.id = #{roleId}
    </select>

    <update id="removeRole">
        UPDATE sys_role
        SET
            delete_status = '2'
        WHERE id = #{roleId}
    </update>
    <update id="removeRoleAllPermission">
        UPDATE sys_role_permission
        SET
            delete_status = '2'
        WHERE role_id = #{roleId}
    </update>

    <update id="removeOldPermission">
        UPDATE sys_role_permission
        SET
        delete_status = '2'
        WHERE role_id = #{roleId}
        AND permission_id in (
        <foreach collection="permissions" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>
    <update id="updateRoleNameAndGroupTag">
        UPDATE sys_role
        SET
            role_name = #{roleName}
        <if test="groupTag !='' and groupTag !=null">
            ,group_tag =  #{groupTag}
        </if>
        WHERE id = #{roleId}
    </update>
    <select id="queryExistUsername" resultType="int">
        select count(0)
         from sys_user
         WHERE username=#{username}
         AND delete_status='1';
    </select>

    <insert id="addActiveCode" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user_active (email, active_code)
        values
        (#{email},#{activeCode})
    </insert>
</mapper>
